[{"/home/daniel/Documents/hourLogger/my-app/src/index.tsx":"1","/home/daniel/Documents/hourLogger/my-app/src/App.tsx":"2","/home/daniel/Documents/hourLogger/my-app/src/DayView.tsx":"3","/home/daniel/Documents/hourLogger/my-app/src/Home.tsx":"4"},{"size":658,"mtime":1654715981071,"results":"5","hashOfConfig":"6"},{"size":1750,"mtime":1658431471875,"results":"7","hashOfConfig":"6"},{"size":6639,"mtime":1658431385740,"results":"8","hashOfConfig":"6"},{"size":1235,"mtime":1658429997207,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wj0zun",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/daniel/Documents/hourLogger/my-app/src/index.tsx",[],[],"/home/daniel/Documents/hourLogger/my-app/src/App.tsx",["24","25","26"],[],"/home/daniel/Documents/hourLogger/my-app/src/DayView.tsx",["27","28","29","30","31","32","33"],[],"import { log } from \"node:console\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { isPropertyAccessChain } from \"typescript\";\nimport \"./App.css\";\n\ntype row = {\n  id: number;\n  hrs: number;\n  activity: string;\n};\ntype state = {\n  table: row[];\n  hrs: string;\n  activity: string;\n};\nlet PageID = 0;\nexport type pageData = { goals: string; table: row[]; date: Date };\nexport let DayView = (props: { pages: [pageData]; setState: any }) => {\n  //TODO: make Page ID dynamic\n  if (props.pages[0] == undefined) {\n    console.log(\"undefined\");\n    props.pages = [\n      { table: [{ id: 0, hrs: 0, activity: \"\" }], goals: \"\", date: new Date() },\n    ];\n  }\n\n  let sendData = (newPage: boolean) => {\n    // add error handling\n    console.log(\n      \"interval send: \" +\n        props.pages[PageID].date +\n        props.pages[PageID].table[0].activity\n    );\n    let table = props.pages[PageID].table;\n    let JSONStr = JSON.stringify(props.pages[PageID]);\n    let request = new XMLHttpRequest();\n    request.open(newPage ? \"post\" : \"put\", \"/update/\");\n    request.setRequestHeader(\"Content-Type\", \"application/json\");\n    request.addEventListener(\"load\", (event) => {\n      console.log(\"message received\");\n    });\n    console.log(JSONStr);\n    request.send(JSONStr);\n  };\n  sendData(true)\n  return (\n    <>\n      <main>\n        {props.pages[0].goals}\n        {/* <h2>{props.pages[PageID].date.toDateString()}</h2> */}\n        <ActivitiesTable pages={props.pages} setState={props.setState} />\n        <Form formID=\"Goals\" value={props.pages[PageID].goals} setState={props.setState} />\n      </main>\n      <nav>\n        <Link to=\"/\">Home</Link>\n      </nav>\n    </>\n  );\n};\n\nlet count: number = 0;\nfunction ActivitiesTable(props: { pages: [pageData]; setState: any }) {\n  let [tableEntry, setTableRow] = React.useState({\n    hrs: NaN,\n    activity: \"enter activitiy\",\n  });\n  let tempPageID = 0;\n  function counter(): number {\n    count++;\n    return count;\n  }\n\n  let tablecounterlock: boolean = false;\n\n  //lock locks table counter\n  function lock() {\n    tablecounterlock = true;\n  }\n\n  //unlock unlocks table counter\n  function unlock() {\n    tablecounterlock = false;\n  }\n  //locked tell you if table counter is locked\n  // @returns boolean\n  function locked(): boolean {\n    return tablecounterlock;\n  }\n\n  function sumHrs(): number {\n    let count = 0;\n    for (let i = 0; i < props.pages[tempPageID].table.length; i++) {\n      let row = props.pages[tempPageID].table[i].hrs;\n      if (row) {\n        console.log(row);\n        count += row;\n      }\n    }\n    return count;\n  }\n  //deleterow deletes row from activity\n  function deleteRow(event: any, id: number) {\n    console.log(\"delete row:\" + \"Id: \" + id.toString());\n    let tempA = props.pages[tempPageID].table;\n    for (let i = 0; i < tempA.length; i++) {\n      if (tempA[i].id === id) {\n        console.log(i);\n        tempA.splice(i, 1);\n        props.setState(props.pages);\n      }\n    }\n    console.log(props.pages[tempPageID].table);\n  }\n  //handleChangeActivity updates state of activity on change\n  function handleChangeActivity(event: any) {\n    setTableRow({\n      activity: event.target.value,\n      hrs: tableEntry.hrs,\n    });\n\n    // console.log(props.value[tempPageID].activity);\n  }\n\n  //handleChangeHrs updates state of hrs on change\n  function handleChangeHrs(event: any) {\n    setTableRow({\n      activity: tableEntry.activity,\n      hrs: event.target.value,\n    });\n\n    // console.log(props.pages[PageID].hrs);\n  }\n\n  //handleSubmit adds row entry to activity table\n  function handleSubmit(event: any) {\n    event.preventDefault();\n    // console.log(props.pages[PageID].activity + \"counter:\" + counter());\n    if (!locked()) {\n      lock();\n      let tempTable = props.pages[PageID].table;\n      tempTable.push({\n        id: counter(),\n        hrs: tableEntry.hrs,\n        activity: tableEntry.activity,\n      });\n      let tempPages: [pageData] = props.pages;\n      tempPages[PageID].table = tempTable;\n      props.setState(tempPages);\n      unlock();\n    } else {\n      alert(\"could not add activity row\");\n    }\n    let nextField = document.getElementById(\"hours\");\n    if (nextField) {\n      nextField.focus();\n    }\n  }\n\n  function hrsOnEnter(event: any) {\n    if (event.keyCode == 13) {\n      event.preventDefault();\n      let nextField = document.getElementById(\"activity\");\n      if (nextField) {\n        nextField.focus();\n      }\n    }\n  }\n\n  //renderTable returns a react node with table rows corresponding to the activitytable array elements.\n  function renderTable() {\n    return props.pages[PageID].table.map((item) => {\n      return (\n        <tr id={item.id.toString()}>\n          <td>{item.hrs}</td>\n          <td>{item.activity}</td>\n          <td>\n            <button\n              type=\"button\"\n              onClick={(event) => deleteRow(event, item.id)}\n            >\n              X\n            </button>\n          </td>\n        </tr>\n      );\n    });\n  }\n  console.log(\"ActivityTable rendering\" + props.pages[PageID].table[0].activity);\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <table className=\"activitiesTable\">\n          <thead>\n            <td>Hours</td>\n            <td>description</td>\n          </thead>\n          <tbody>\n            {renderTable()}\n            <tr>\n              <td>\n                <input\n                  id=\"hours\"\n                  type=\"number\"\n                  value={tableEntry.hrs}\n                  onChange={handleChangeHrs}\n                  onKeyDown={hrsOnEnter}\n                ></input>\n              </td>\n              <td>\n                <input\n                  id=\"activity\"\n                  type=\"text\"\n                  value={tableEntry.activity}\n                  onChange={handleChangeActivity}\n                ></input>\n              </td>\n              <td>\n                <input type=\"submit\" value=\"+\" />\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <td>Total: {sumHrs()}</td>\n          </tfoot>\n        </table>\n      </form>\n    </div>\n  );\n}\n\nlet Form = (props: { formID: string; value: string; setState: any }) => {\n  function handleSubmit(event: any) {\n    console.log(props.formID + \" \" + props.value);\n    event.preventDefault();\n  }\n\n  return (\n    <div>\n      \n      <form onSubmit={handleSubmit}>\n        <label>{props.formID}</label>\n        <br />\n        <textarea\n          value={props.value}\n          onChange={(event) => props.setState(event.target.value)}\n        />\n        <br />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </div>\n  );\n};\n","/home/daniel/Documents/hourLogger/my-app/src/Home.tsx",["34","35","36"],[],"import * as React from \"react\";\nimport {pageData} from \"./DayView\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Home(props: {pages: [pageData], setState: any}) {\n  const [count, setCount] = React.useState(\"test\");\n  let increment = () => {\n    setCount(count + 1);\n  };\n  let decrement = () => {\n    setCount(count + 1);\n  };\n  return (\n    <div>\n      <main>\n        <Table pages={props.pages} />\n        <Link to=\"/dayview\">dayview</Link>\n\n      </main>\n    </div>\n  );\n}\n\nfunction Table(props:{pages: [pageData]}) {\n    return (\n      <table>\n        <thead>\n          <td>Summary</td>\n          <td>Total HRS</td>\n          <td>row ID</td>\n        </thead>\n        <tbody>\n          {props.pages.map((page, ID, a) => {\n            let tally = 0;\n            if (page.table != undefined) {\n              for (let row of page.table) {\n                tally += row.hrs + 0;\n              }\n            }\n            return (\n              <tr id={ID.toString()}>\n                <td> <Link to={\"/dayview/\"+ new Date().toDateString()}>{page.goals}</Link></td>\n                <td>{tally}</td>\n                <td>{ID}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n}\n",{"ruleId":"37","severity":1,"message":"38","line":2,"column":25,"nodeType":"39","messageId":"40","endLine":2,"endColumn":29},{"ruleId":"37","severity":1,"message":"41","line":3,"column":10,"nodeType":"39","messageId":"40","endLine":3,"endColumn":29},{"ruleId":"37","severity":1,"message":"42","line":35,"column":7,"nodeType":"39","messageId":"40","endLine":35,"endColumn":11},{"ruleId":"37","severity":1,"message":"43","line":1,"column":10,"nodeType":"39","messageId":"40","endLine":1,"endColumn":13},{"ruleId":"37","severity":1,"message":"44","line":4,"column":10,"nodeType":"39","messageId":"40","endLine":4,"endColumn":31},{"ruleId":"37","severity":1,"message":"45","line":12,"column":6,"nodeType":"39","messageId":"40","endLine":12,"endColumn":11},{"ruleId":"46","severity":1,"message":"47","line":21,"column":22,"nodeType":"48","messageId":"49","endLine":21,"endColumn":24},{"ruleId":"37","severity":1,"message":"50","line":35,"column":9,"nodeType":"39","messageId":"40","endLine":35,"endColumn":14},{"ruleId":"51","severity":1,"message":"52","line":104,"column":31,"nodeType":"48","messageId":"53","endLine":104,"endColumn":32},{"ruleId":"46","severity":1,"message":"47","line":161,"column":23,"nodeType":"48","messageId":"49","endLine":161,"endColumn":25},{"ruleId":"37","severity":1,"message":"54","line":7,"column":7,"nodeType":"39","messageId":"40","endLine":7,"endColumn":16},{"ruleId":"37","severity":1,"message":"55","line":10,"column":7,"nodeType":"39","messageId":"40","endLine":10,"endColumn":16},{"ruleId":"46","severity":1,"message":"56","line":35,"column":28,"nodeType":"48","messageId":"49","endLine":35,"endColumn":30},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'isPropertySignature' is defined but never used.","'date' is assigned a value but never used.","'log' is defined but never used.","'isPropertyAccessChain' is defined but never used.","'state' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'table' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'increment' is assigned a value but never used.","'decrement' is assigned a value but never used.","Expected '!==' and instead saw '!='."]