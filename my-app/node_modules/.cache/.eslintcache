[{"/home/daniel/Documents/hourLogger/my-app/src/index.tsx":"1","/home/daniel/Documents/hourLogger/my-app/src/App.tsx":"2","/home/daniel/Documents/hourLogger/my-app/src/DayView.tsx":"3","/home/daniel/Documents/hourLogger/my-app/src/Home.tsx":"4"},{"size":658,"mtime":1654715981071,"results":"5","hashOfConfig":"6"},{"size":2885,"mtime":1659470243383,"results":"7","hashOfConfig":"6"},{"size":8381,"mtime":1659469908333,"results":"8","hashOfConfig":"6"},{"size":1521,"mtime":1659470339494,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wj0zun",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/daniel/Documents/hourLogger/my-app/src/index.tsx",[],[],"/home/daniel/Documents/hourLogger/my-app/src/App.tsx",["23","24"],[],"/home/daniel/Documents/hourLogger/my-app/src/DayView.tsx",["25","26","27","28","29","30","31","32","33","34"],[],"import { log } from \"node:console\";\nimport * as React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { isPropertyAccessChain } from \"typescript\";\nimport \"./App.css\";\nimport type { state } from \"./App\";\nimport { setEnvironmentData } from \"node:worker_threads\";\n\ntype row = {\n  id: number;\n  hrs: number;\n  activity: string;\n};\nlet PageID = 0;\nexport type pageData = { goals: string; table: row[]; date: string };\nexport let DayView = (props: { state: state; setState: any }) => {\n  let newPage = false;\n  // console.log(document.baseURI);\n  let params = useParams();\n  if (params.date && params.date != \"new\") {\n    console.log(\"saw date param:\");\n    console.log(params.date);\n    let str = params.date;\n    props.state.pages.forEach((value, i) => {\n      if (value.date == str) {\n        PageID = i;\n      }\n    });\n  }\n  if (params.date == \"new\") {\n    // console.log(\"DayView: newPage\");\n    props.state.pages = [\n      { table: [], goals: \"\", date: new Date().toDateString() },\n    ];\n    newPage = true;\n  }\n  let sendData = () => {\n    if (props.state.pages[PageID]) {\n      // add error handlingprops.pages[PageID].table[1].activity\n      console.log(\"interval send: \" + props.state.pages[PageID].date);\n      let table = props.state.pages[PageID].table;\n      let JSONStr = JSON.stringify(props.state.pages[PageID]);\n      let request = new XMLHttpRequest();\n      request.open(newPage ? \"post\" : \"put\", \"/update/\");\n      request.setRequestHeader(\"Content-Type\", \"application/json\");\n      request.addEventListener(\"load\", (event) => {\n        console.log(\"XHR Status code: \", request.status);\n        if (request.status === 409) {\n          alert(\"The page you are trying to create already exists\");\n        }\n      });\n      console.log(\"SENDDATA:\");\n      console.log(newPage ? \"post\" : \"put\");\n      console.log(JSONStr);\n      request.send(JSONStr);\n    }\n  };\n\n  // console.log(\"Rendering DayView with: \");\n  // console.log(props.state.pages);\n\n  let main = props.state.pages ? (\n    <main>\n      <h2>{props.state.pages[PageID].date}</h2>\n      <ActivitiesTable\n        state={props.state}\n        setState={props.setState}\n        sendData={sendData}\n      />\n      <Form\n        formID=\"Goals\"\n        value={props.state.pages[PageID].goals}\n        setState={props.setState}\n      />\n    </main>\n  ) : (\n    <main>Loading...</main>\n  );\n  return (\n    <>\n      {main}\n      <nav>\n        <Link to=\"/\">Home</Link>\n      </nav>\n    </>\n  );\n};\n\nlet count: number = 0;\nfunction ActivitiesTable(props: {\n  state: state;\n  setState: any;\n  sendData: any;\n}) {\n  let [tableEntry, setTableRow] = React.useState({\n    hrs: NaN,\n    activity: \"enter activitiy\",\n  });\n  function counter(): number {\n    count++;\n    return count;\n  }\n  //handleSubmit adds row entry to activity table\n  function handleSubmit(event: any) {\n    event.preventDefault();\n    // console.log(props.pages[PageID].activity + \"counter:\" + counter());\n    if (!locked()) {\n      lock();\n      let tempTable = props.state.pages[PageID].table;\n      console.log(\"adding row: \" + tableEntry.hrs);\n      tempTable.push({\n        id: counter(),\n        hrs: tableEntry.hrs,\n        activity: tableEntry.activity,\n      });\n\n      let tempPages = props.state.pages;\n      tempPages[PageID].table = tempTable;\n      props.setState(tempPages);\n      setTableRow({\n        hrs: NaN,\n        activity: \"enter activitiy\",\n      });\n      console.log(\"adding row: \" + props.state.pages[PageID].table[0].hrs);\n      props.sendData();\n      unlock();\n    } else {\n      alert(\"could not add activity row\");\n    }\n    let nextField = document.getElementById(\"hours\");\n    if (nextField) {\n      nextField.focus();\n    }\n\n    props.setState((value: state) => {\n      // console.log(\"after Adding row:\");\n      // console.log(value.pages[PageID].table);\n      return value;\n    });\n  }\n\n  let tablecounterlock: boolean = false;\n\n  //lock locks table counter\n  function lock() {\n    tablecounterlock = true;\n  }\n\n  //unlock unlocks table counter\n  function unlock() {\n    tablecounterlock = false;\n  }\n  //locked tell you if table counter is locked\n  // @returns boolean\n  function locked(): boolean {\n    return tablecounterlock;\n  }\n\n  function sumHrs(): number {\n    let count = 0;\n    for (let i = 0; i < props.state.pages[PageID].table.length; i++) {\n      let row = props.state.pages[PageID].table[i].hrs;\n      if (row) {\n        console.log(row);\n        count += row;\n      }\n    }\n    return count;\n  }\n  //deleterow deletes row from activity\n  function deleteRow(id: number) {\n    console.log(\"delete row:\" + \"Id: \" + id.toString());\n    let tempA = props.state.pages[PageID].table;\n    for (let i = 0; i < tempA.length; i++) {\n      if (tempA[i].id === id) {\n        console.log(i);\n        tempA.splice(i, 1);\n        let pages = props.state.pages;\n        pages[PageID].table = tempA;\n        props.setState({ pages });\n      }\n    }\n    console.log(\"DeleteRow:\");\n    console.log(props.state.pages[PageID].table);\n    props.sendData();\n  }\n  //handleChangeActivity updates state of activity on change\n  function handleChangeActivity(event: any) {\n    setTableRow({\n      activity: event.target.value,\n      hrs: tableEntry.hrs,\n    });\n\n    // console.log(props.value[tempPageID].activity);\n  }\n\n  //handleChangeHrs updates state of hrs on change\n  function handleChangeHrs(event: any) {\n    setTableRow({\n      activity: tableEntry.activity,\n      hrs: parseFloat(event.target.value),\n    });\n\n    // console.log(props.pages[PageID].hrs);\n  }\n\n  function hrsOnEnter(event: any) {\n    if (event.keyCode == 13) {\n      event.preventDefault();\n      let nextField = document.getElementById(\"activity\");\n      if (nextField) {\n        nextField.focus();\n      }\n    }\n  }\n\n  // console.log(\n  //   \"ActivityTable rendering\" + props.pages[PageID].table[0].activity\n  // );\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <table  className=\"table\">\n          <thead>\n            <td>Hours</td>\n            <td>description</td>\n          </thead>\n          <tbody>\n            <TableMap state={props.state} />\n            <tr>\n              <td>\n                <input\n                  id=\"hours\"\n                  type=\"number\"\n                  value={tableEntry.hrs}\n                  onChange={handleChangeHrs}\n                  onKeyDown={hrsOnEnter}\n                ></input>\n              </td>\n              <td>\n                <input\n                  id=\"activity\"\n                  type=\"text\"\n                  value={tableEntry.activity}\n                  onChange={handleChangeActivity}\n                ></input>\n              </td>\n              <td>\n                <input type=\"submit\" value=\"+\" />\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <td>Total: {sumHrs()}</td>\n          </tfoot>\n        </table>\n      </form>\n    </div>\n  );\n}\n\n//renderTable returns a react node with table rows corresponding to the activitytable array elements.\nlet TableMap = (props: { state: state }) => {\n  let rows = props.state.pages[PageID].table.map((item) => {\n    console.log(\n      \"DayView: renderTable: updating table with row\" + item.id + item.activity\n    );\n    if (item != null) {\n      return (\n        <tr id={item.id.toString()}>\n          <td>{item.hrs}</td>\n          <td>{item.activity}</td>\n          <td>\n            <button\n              type=\"button\"\n              // onClick={() => deleteRow(item.id)}\n            >\n              X\n            </button>\n          </td>\n        </tr>\n      );\n    } else {\n      console.log(\"DayView: renderTable: map is empty\");\n      return (\n        <tr>\n          <td>No entries... yet, time to get some shit done!</td>\n          <td>empty</td>\n          <td>emtry</td>\n        </tr>\n      );\n    }\n  });\n  return <>{rows}</>;\n};\n\nlet Form = (props: { formID: string; value: string; setState: any }) => {\n  function handleSubmit(event: any) {\n    console.log(props.formID + \" \" + props.value);\n    event.preventDefault();\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>{props.formID}</label>\n        <br />\n        <textarea\n          value={props.value}\n          onChange={(event) => props.setState(event.target.value)}\n        />\n        <br />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </div>\n  );\n};\n","/home/daniel/Documents/hourLogger/my-app/src/Home.tsx",["35","36","37","38","39","40"],[],{"ruleId":"41","severity":1,"message":"42","line":2,"column":25,"nodeType":"43","messageId":"44","endLine":2,"endColumn":29},{"ruleId":"41","severity":1,"message":"45","line":3,"column":10,"nodeType":"43","messageId":"44","endLine":3,"endColumn":29},{"ruleId":"41","severity":1,"message":"46","line":1,"column":10,"nodeType":"43","messageId":"44","endLine":1,"endColumn":13},{"ruleId":"41","severity":1,"message":"47","line":4,"column":10,"nodeType":"43","messageId":"44","endLine":4,"endColumn":31},{"ruleId":"41","severity":1,"message":"48","line":7,"column":10,"nodeType":"43","messageId":"44","endLine":7,"endColumn":28},{"ruleId":"49","severity":1,"message":"50","line":20,"column":34,"nodeType":"51","messageId":"52","endLine":20,"endColumn":36},{"ruleId":"49","severity":1,"message":"53","line":25,"column":22,"nodeType":"51","messageId":"52","endLine":25,"endColumn":24},{"ruleId":"49","severity":1,"message":"53","line":30,"column":19,"nodeType":"51","messageId":"52","endLine":30,"endColumn":21},{"ruleId":"41","severity":1,"message":"54","line":41,"column":11,"nodeType":"43","messageId":"44","endLine":41,"endColumn":16},{"ruleId":"41","severity":1,"message":"55","line":171,"column":12,"nodeType":"43","messageId":"44","endLine":171,"endColumn":21},{"ruleId":"56","severity":1,"message":"57","line":172,"column":31,"nodeType":"51","messageId":"58","endLine":172,"endColumn":32},{"ruleId":"49","severity":1,"message":"53","line":208,"column":23,"nodeType":"51","messageId":"52","endLine":208,"endColumn":25},{"ruleId":"41","severity":1,"message":"59","line":4,"column":10,"nodeType":"43","messageId":"44","endLine":4,"endColumn":26},{"ruleId":"41","severity":1,"message":"60","line":12,"column":7,"nodeType":"43","messageId":"44","endLine":12,"endColumn":16},{"ruleId":"41","severity":1,"message":"61","line":15,"column":7,"nodeType":"43","messageId":"44","endLine":15,"endColumn":16},{"ruleId":"62","severity":1,"message":"63","line":18,"column":41,"nodeType":"64","endLine":18,"endColumn":43,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":39,"column":40,"nodeType":"68","messageId":"69","endLine":39,"endColumn":42},{"ruleId":"49","severity":1,"message":"50","line":41,"column":26,"nodeType":"51","messageId":"52","endLine":41,"endColumn":28},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'isPropertySignature' is defined but never used.","'log' is defined but never used.","'isPropertyAccessChain' is defined but never used.","'setEnvironmentData' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'table' is assigned a value but never used.","'deleteRow' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'setConstantValue' is defined but never used.","'increment' is assigned a value but never used.","'decrement' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.","ArrayExpression",["70"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"desc":"71","fix":"72"},"Update the dependencies array to be: [props]",{"range":"73","text":"74"},[463,465],"[props]"]