[{"/home/dan/Code/hourLogger/my-app/src/index.tsx":"1","/home/dan/Code/hourLogger/my-app/src/App.tsx":"2","/home/dan/Code/hourLogger/my-app/src/Home.tsx":"3","/home/dan/Code/hourLogger/my-app/src/DayView.tsx":"4"},{"size":658,"mtime":1660572176932,"results":"5","hashOfConfig":"6"},{"size":2165,"mtime":1660572176932,"results":"7","hashOfConfig":"6"},{"size":1927,"mtime":1660572176932,"results":"8","hashOfConfig":"6"},{"size":10763,"mtime":1660572176932,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jmfoxc",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/home/dan/Code/hourLogger/my-app/src/index.tsx",[],[],"/home/dan/Code/hourLogger/my-app/src/App.tsx",["25","26"],[],"import * as React from \"react\";\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport { isPropertySignature } from \"typescript\";\nimport { DayView } from \"./DayView\";\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport { pageData } from \"./DayView\";\n\nexport type state = { pages: [pageData] };\nexport default class App extends React.Component {\n  state: state;\n  getAll = () => {\n    //Dev Flag for console\n    let printConsole = false;\n    fetch(\"/getall\")\n      .then(\n        (data) => data.json(),\n        (err) => console.log(err)\n      )\n      .catch((err) => console.log(err))\n      .then((data: { data: [pageData] }) => {\n        if (data.data[0]) {\n          this.setState({ pages: data.data });\n          if (printConsole) {\n            console.log(\"writing from fetch to state\");\n            console.log(data.data);\n          }\n        }\n        if (printConsole) {\n          console.log(\"updated state from fetch:\");\n          this.setState((state) => console.log(state));\n        }\n      });\n  };\n  constructor(props: any) {\n    super(props);\n    let p = [\n      { table: [], goals: \"\", date: new Date().toDateString() },\n    ] as never;\n    this.state = { pages: p };\n    this.setState = this.setState.bind(this);\n    this.getAll = this.getAll.bind(this);\n    this.interval = null as unknown as NodeJS.Timer;\n  }\n  interval: NodeJS.Timer;\n  componentDidMount() {\n    this.interval = setInterval(() => this.getAll(), 5000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return (\n      <div className=\"container-fluid App\">\n        <header className=\"row navbar text-center bg-success\">\n          <h1 className=\"display-1\">Hour Logger</h1>\n        </header>\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <Home\n                pages={this.state.pages}\n                setState={this.setState}\n                getAll={this.getAll}\n              />\n            }\n          />\n          <Route\n            path=\"/dayview/:date\"\n            element={<DayView state={this.state} setState={this.setState} />}\n          />\n        </Routes>\n      </div>\n    );\n  }\n}","/home/dan/Code/hourLogger/my-app/src/Home.tsx",["27","28","29","30","31","32"],[],"import React from \"react\";\nimport { pageData } from \"./DayView\";\nimport { Link } from \"react-router-dom\";\nimport { setConstantValue } from \"typescript\";\n\nexport default function Home(props: {\n  pages: [pageData];\n  setState: any;\n  getAll: VoidFunction;\n}) {\n  const [count, setCount] = React.useState(\"test\");\n  let increment = () => {\n    setCount(count + 1);\n  };\n  let decrement = () => {\n    setCount(count + 1);\n  };\n  React.useEffect(() => props.getAll(), []);\n  return (\n    <div>\n      <main>\n        <div className=\"container\">\n          <Table pages={props.pages} />\n          <div className=\"row\">\n            <div className=\"col text-center \">\n              <Link\n                className=\"col-sm-4  btn btn-default  bg-success\"\n                to=\"/dayview/new\"\n              >\n                Create New Page\n              </Link>\n              {/* <button className=\"col-sm-2 btn btn-default bg-success\">Centered button</button> */}\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nfunction Table(props: { pages: [pageData] }) {\n  if (props.pages == null) return <div id=\"noData\">no data</div>;\n  return (\n    <table className=\"table\">\n      <thead>\n        {/* <td>Summary</td> */}\n        <td>Total HRS</td>\n        <td>Date</td>\n      </thead>\n      <tbody>\n        {props.pages.map((page, ID, a) => {\n          let tally = 0;\n          if (page.table != undefined) {\n            for (let row of page.table) {\n              tally += row.hrs + 0;\n            }\n          }\n          if (page.date !== \"\") {\n            return (\n              <tr id={page.date}>\n                {/* <td>{page.date}</td> */}\n                <td>{tally}</td>\n                <td>\n                  {\" \"}\n                  <Link to={\"/dayview/\" + page.date}>{page.date}</Link>\n                </td>\n              </tr>\n            );\n          }\n        })}\n      </tbody>\n    </table>\n  );\n}\n","/home/dan/Code/hourLogger/my-app/src/DayView.tsx",["33","34","35","36","37","38","39","40","41","42"],[],"import { log } from \"node:console\";\nimport * as React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport {\n  flattenDiagnosticMessageText,\n  isPropertyAccessChain,\n} from \"typescript\";\nimport \"./App.css\";\nimport type { state } from \"./App\";\nimport { setEnvironmentData } from \"node:worker_threads\";\nimport { getSystemErrorMap } from \"node:util\";\n\ntype row = {\n  id: number;\n  hrs: number;\n  activity: string;\n};\nlet PageID = 0;\nlet newPage = false;\nlet notSavedFlag = true;\nexport type pageData = { goals: string; table: row[]; date: string };\nexport let DayView = (props: { state: state; setState: any }) => {\n  // console.log(document.baseURI);\n  let params = useParams();\n  if (params.date && params.date != \"new\") {\n    console.log(\"saw date param:\");\n    console.log(params.date);\n    let str = params.date;\n    props.state.pages.forEach((value, i) => {\n      if (value.date == str) {\n        PageID = i;\n      }\n    });\n  }\n  if (params.date == \"new\") {\n    // console.log(\"DayView: newPage\");\n    props.state.pages = [\n      { table: [], goals: \"\", date: new Date().toDateString() },\n    ];\n    newPage = true;\n  }\n\n  // console.log(\"Rendering DayView with: \");\n  // console.log(props.state.pages);\n\n  let main = props.state.pages ? (\n    <main className=\"container-fluid \">\n      <div className=\"row bg-secondary justify-content-center display-4\">\n        {props.state.pages[PageID].date}\n      </div>\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <ActivitiesTable state={props.state} setState={props.setState} />\n        </div>\n        <div className=\"col-lg-6\">\n          <Form formID=\"Goals\" state={props.state} setState={props.setState} />\n        </div>\n      </div>\n    </main>\n  ) : (\n    <main>Loading...</main>\n  );\n  return (\n    <div className=\"\">\n      {main}\n      <nav>\n        <Link className=\"col-lg-2 pull-lg-4 btn bg-success\" to=\"/\">\n          Home\n        </Link>\n      </nav>\n    </div>\n  );\n};\nlet NotSaved = () => {\n  if (notSavedFlag) {\n    return (\n      <div className=\"row justify-content-center\">\n        <div className=\"col-sm-4 btn bg-warning\">\n          Warning: Changes to Goals are not saved, click submit button\n        </div>\n      </div>\n    );\n  }\n  return <div className=\"row bg-success\">Field is up saved</div>;\n};\nlet count: number = 0;\nfunction ActivitiesTable(props: { state: state; setState: any }) {\n  let [tableEntry, setTableRow] = React.useState({\n    hrs: NaN,\n    activity: \"enter activitiy\",\n  });\n  function counter(): number {\n    count++;\n    return count;\n  }\n  //handleSubmit adds row entry to activity table\n  function handleSubmit(event: any) {\n    event.preventDefault();\n    // console.log(props.pages[PageID].activity + \"counter:\" + counter());\n    if (!locked()) {\n      lock();\n      let tempTable = props.state.pages[PageID].table;\n      console.log(\"adding row: \" + tableEntry.hrs);\n      tempTable.push({\n        id: counter(),\n        hrs: tableEntry.hrs,\n        activity: tableEntry.activity,\n      });\n\n      let tempPages = props.state.pages;\n      tempPages[PageID].table = tempTable;\n      props.setState(tempPages);\n      setTableRow({\n        hrs: NaN,\n        activity: \"enter activitiy\",\n      });\n      console.log(\"adding row: \" + props.state.pages[PageID].table[0].hrs);\n      props.setState((state: state) => {\n        // console.log(state.pages[PageID].table[0].hrs || NaN);\n        sendData(state);\n      });\n      unlock();\n    } else {\n      alert(\"could not add activity row\");\n    }\n    let nextField = document.getElementById(\"hours\");\n    if (nextField) {\n      nextField.focus();\n    }\n\n    props.setState((value: state) => {\n      // console.log(\"after Adding row:\");\n      // console.log(value.pages[PageID].table);\n      return value;\n    });\n  }\n\n  let tablecounterlock: boolean = false;\n\n  //lock locks table counter\n  function lock() {\n    tablecounterlock = true;\n  }\n\n  //unlock unlocks table counter\n  function unlock() {\n    tablecounterlock = false;\n  }\n  //locked tell you if table counter is locked\n  // @returns boolean\n  function locked(): boolean {\n    return tablecounterlock;\n  }\n\n  function sumHrs(): number {\n    let count = 0;\n    for (let i = 0; i < props.state.pages[PageID].table.length; i++) {\n      let row = props.state.pages[PageID].table[i].hrs;\n      if (row) {\n        console.log(row);\n        count += row;\n      }\n    }\n    return count;\n  }\n\n  //handleChangeActivity updates state of activity on change\n  function handleChangeActivity(event: any) {\n    setTableRow({\n      activity: event.target.value,\n      hrs: tableEntry.hrs,\n    });\n\n    // console.log(props.value[tempPageID].activity);\n  }\n\n  //handleChangeHrs updates state of hrs on change\n  function handleChangeHrs(event: any) {\n    setTableRow({\n      activity: tableEntry.activity,\n      hrs: parseFloat(event.target.value),\n    });\n\n    // console.log(props.pages[PageID].hrs);\n  }\n\n  function hrsOnEnter(event: any) {\n    if (event.keyCode == 13) {\n      event.preventDefault();\n      let nextField = document.getElementById(\"activity\");\n      if (nextField) {\n        nextField.focus();\n      }\n    }\n  }\n\n  // console.log(\n  //   \"ActivityTable rendering\" + props.pages[PageID].table[0].activity\n  // );\n  return (\n    <div>\n      <form className=\" form-group\" onSubmit={handleSubmit}>\n        <table className=\"table\">\n          <thead>\n            <td>Hours</td>\n            <td>description</td>\n          </thead>\n          <tbody>\n            <TableMap state={props.state} setState={props.setState} />\n            <tr>\n              <td>\n                <input\n                  className=\"form-control\"\n                  id=\"hours\"\n                  type=\"number\"\n                  value={tableEntry.hrs}\n                  onChange={handleChangeHrs}\n                  onKeyDown={hrsOnEnter}\n                ></input>\n              </td>\n              <td>\n                <input\n                  className=\"form-control\"\n                  id=\"activity\"\n                  type=\"text\"\n                  value={tableEntry.activity}\n                  onChange={handleChangeActivity}\n                ></input>\n              </td>\n              <td>\n                <input\n                  className=\"form-control btn btn-outline-secondary\"\n                  type=\"submit\"\n                  value=\"+\"\n                />\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <td>Total: {sumHrs()}</td>\n          </tfoot>\n        </table>\n      </form>\n    </div>\n  );\n}\n\nfunction sendData(state: state) {\n  if (state.pages[PageID]) {\n    // add error handlingprops.pages[PageID].table[1].activity\n    console.log(\"interval send: \" + state.pages[PageID].date);\n    let JSONStr = JSON.stringify(state.pages[PageID]);\n    let request = new XMLHttpRequest();\n    request.open(newPage ? \"post\" : \"put\", \"/update/\");\n    request.setRequestHeader(\"Content-Type\", \"application/json\");\n    request.addEventListener(\"load\", (event) => {\n      console.log(\"XHR Status code: \", request.status);\n      if (request.status === 409) {\n        alert(\"The page you are trying to create already exists\");\n      }\n    });\n    console.log(\"SENDDATA:\");\n    console.log(newPage ? \"post\" : \"put\");\n    console.log(JSONStr);\n    request.send(JSONStr);\n  }\n}\n\n//deleterow deletes row from activity\nfunction deleteRow(id: number, state: state, setState: any) {\n  console.log(\"delete row:\" + \"Id: \" + id.toString());\n  let tempA = state.pages[PageID].table;\n  for (let i = 0; i < tempA.length; i++) {\n    if (tempA[i].id === id) {\n      console.log(i);\n      tempA.splice(i, 1);\n      let pages = state.pages;\n      pages[PageID].table = tempA;\n      setState({ pages });\n    }\n  }\n  console.log(\"DeleteRow:\");\n  console.log(state.pages[PageID].table);\n  sendData(state);\n}\n\n//renderTable returns a react node with table rows corresponding to the activitytable array elements.\nlet TableMap = (props: { state: state; setState: any }) => {\n  let rows = props.state.pages[PageID].table.map((item) => {\n    console.log(\n      \"DayView: renderTable: updating table with row\" + item.id + item.activity\n    );\n    if (item != null) {\n      return (\n        <tr id={item.id.toString()}>\n          <td>{item.hrs}</td>\n          <td>{item.activity}</td>\n          <td>\n            <button\n              className=\"btn btn-secondary\"\n              type=\"button\"\n              onClick={() => deleteRow(item.id, props.state, props.setState)}\n            >\n              X\n            </button>\n          </td>\n        </tr>\n      );\n    } else {\n      console.log(\"DayView: renderTable: map is empty\");\n      return (\n        <tr>\n          <td>No entries... yet, time to get some shit done!</td>\n          <td>empty</td>\n          <td>emtry</td>\n        </tr>\n      );\n    }\n  });\n  return <>{rows}</>;\n};\n\n//not modular currently!!\nlet Form = (props: { formID: string; state: state; setState: any }) => {\n  function updateGoal(event: any, state: state, setState: any) {\n    let tempState = state;\n    tempState.pages[PageID].goals = event.target.value;\n    setState((state: state) => {\n      console.log(\"Update Goals before:\");\n      console.log(state.pages[PageID].goals);\n      return tempState;\n    });\n    setState((state: state) => {\n      console.log(\"updateGoals after:\");\n      console.log(state.pages[PageID].goals);\n    });\n  }\n\n  return (\n    <div className=\"row\">\n      <form\n        onSubmit={(event) => event.preventDefault()}\n        onChange={(event) => updateGoal(event, props.state, props.setState)}\n        className=\"form text-center\"\n      >\n        <label>{props.formID}</label>\n        <br />\n        <textarea\n          className=\"form-control\"\n          value={props.state.pages[PageID].goals}\n          onChange={(event) => props.setState({} as state)}\n        />\n        <br />\n        <NotSaved />\n        <input\n          className=\"btn btn-outline-secondary\"\n          type=\"submit\"\n          value=\"Submit\"\n        />\n      </form>\n    </div>\n  );\n};\n\n// React.useEffect\n//\n// local form State\n//\n// global state\n//\n// get current global state and set it to goals on component Mount\n// when globalstate.goals changes update local state (useeffect(updatefunction, goals))\n// on form change update local\n// on submit update global and call sendData\n//\n// changes not saved System\n// up to date flag\n// onmount get current global state\n// function that shows warning and asks if you want to save progress on goals form\n// little indicator above goals form\n// onchange upToDate flag is false\n// on sendData upToDate is true\n// (ideally only when goals is mismatched with DB (or at least global state) upToDate is false)\n// Watch video on autosave. like youtube what docs does for this feature\n",{"ruleId":"43","severity":1,"message":"44","line":2,"column":25,"nodeType":"45","messageId":"46","endLine":2,"endColumn":29},{"ruleId":"43","severity":1,"message":"47","line":3,"column":10,"nodeType":"45","messageId":"46","endLine":3,"endColumn":29},{"ruleId":"43","severity":1,"message":"48","line":4,"column":10,"nodeType":"45","messageId":"46","endLine":4,"endColumn":26},{"ruleId":"43","severity":1,"message":"49","line":12,"column":7,"nodeType":"45","messageId":"46","endLine":12,"endColumn":16},{"ruleId":"43","severity":1,"message":"50","line":15,"column":7,"nodeType":"45","messageId":"46","endLine":15,"endColumn":16},{"ruleId":"51","severity":1,"message":"52","line":18,"column":41,"nodeType":"53","endLine":18,"endColumn":43,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":51,"column":40,"nodeType":"57","messageId":"58","endLine":51,"endColumn":42},{"ruleId":"59","severity":1,"message":"60","line":53,"column":26,"nodeType":"61","messageId":"62","endLine":53,"endColumn":28},{"ruleId":"43","severity":1,"message":"63","line":1,"column":10,"nodeType":"45","messageId":"46","endLine":1,"endColumn":13},{"ruleId":"43","severity":1,"message":"64","line":5,"column":3,"nodeType":"45","messageId":"46","endLine":5,"endColumn":31},{"ruleId":"43","severity":1,"message":"65","line":6,"column":3,"nodeType":"45","messageId":"46","endLine":6,"endColumn":24},{"ruleId":"43","severity":1,"message":"66","line":10,"column":10,"nodeType":"45","messageId":"46","endLine":10,"endColumn":28},{"ruleId":"43","severity":1,"message":"67","line":11,"column":10,"nodeType":"45","messageId":"46","endLine":11,"endColumn":27},{"ruleId":"59","severity":1,"message":"60","line":25,"column":34,"nodeType":"61","messageId":"62","endLine":25,"endColumn":36},{"ruleId":"59","severity":1,"message":"68","line":30,"column":22,"nodeType":"61","messageId":"62","endLine":30,"endColumn":24},{"ruleId":"59","severity":1,"message":"68","line":35,"column":19,"nodeType":"61","messageId":"62","endLine":35,"endColumn":21},{"ruleId":"59","severity":1,"message":"68","line":188,"column":23,"nodeType":"61","messageId":"62","endLine":188,"endColumn":25},{"ruleId":"69","severity":1,"message":"70","line":271,"column":29,"nodeType":"61","messageId":"71","endLine":271,"endColumn":30},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'isPropertySignature' is defined but never used.","'setConstantValue' is defined but never used.","'increment' is assigned a value but never used.","'decrement' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.","ArrayExpression",["72"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'log' is defined but never used.","'flattenDiagnosticMessageText' is defined but never used.","'isPropertyAccessChain' is defined but never used.","'setEnvironmentData' is defined but never used.","'getSystemErrorMap' is defined but never used.","Expected '===' and instead saw '=='.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",{"desc":"73","fix":"74"},"Update the dependencies array to be: [props]",{"range":"75","text":"76"},[463,465],"[props]"]