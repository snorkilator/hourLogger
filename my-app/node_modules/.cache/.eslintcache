[{"/home/daniel/Documents/hourLogger/my-app/src/index.tsx":"1","/home/daniel/Documents/hourLogger/my-app/src/App.tsx":"2","/home/daniel/Documents/hourLogger/my-app/src/DayView.tsx":"3","/home/daniel/Documents/hourLogger/my-app/src/Home.tsx":"4"},{"size":658,"mtime":1654715981071,"results":"5","hashOfConfig":"6"},{"size":2861,"mtime":1659199558836,"results":"7","hashOfConfig":"6"},{"size":8233,"mtime":1659195285506,"results":"8","hashOfConfig":"6"},{"size":1455,"mtime":1659199244122,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wj0zun",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/home/daniel/Documents/hourLogger/my-app/src/index.tsx",[],[],"/home/daniel/Documents/hourLogger/my-app/src/App.tsx",["25","26"],[],"import * as React from \"react\";\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport { isPropertySignature } from \"typescript\";\nimport { DayView } from \"./DayView\";\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport { pageData } from \"./DayView\";\n\n/*\nReceiving\nHow does the transaction work?\n  initiate the request with get command\n  use page date as ID\n  send ID in url as page path\n    react router link on main page\n    link sends you to the page display\n      before page displays, do pull from database,\n        unwrap into object\n          populate state with object\n      Display page\n      if pull fails, display error message in alert box\nWhen do I want to get current state from server?\n- after, sending current state to server with good response\n  - do that on time intervols\n- Onload of page, receive current DB status\n- after a certain amount of changed to the website (nice to have, maybe not necessary) \n*/\n\nexport type state = { pages: [pageData] };\nexport default class App extends React.Component {\n  state: state;\n  getAll = () => {\n    //Dev Flag for console\n    let printConsole = false;\n    fetch(\"/getall\")\n      .then(\n        (data) => data.json(),\n        (err) => console.log(err)\n      )\n      .catch((err) => console.log(err))\n      .then((data: { data: [pageData] }) => {\n        if (data.data[0]) {\n          this.setState({ pages: data.data });\n          if (printConsole) {\n            console.log(\"writing from fetch to state\");\n            console.log(data.data);\n          }\n        }\n        if (printConsole) {\n          console.log(\"updated state from fetch:\");\n          this.setState((state) => console.log(state));\n        }\n      });\n  };\n  constructor(props: any) {\n    super(props);\n    let p = [\n      { table: [], goals: \"\", date: new Date().toDateString() },\n    ] as never;\n    this.state = { pages: p };\n    this.setState = this.setState.bind(this);\n    this.getAll = this.getAll.bind(this);\n    this.interval = null as unknown as NodeJS.Timer;\n  }\n  interval: NodeJS.Timer;\n  componentDidMount() {\n    this.interval = setInterval(() => this.getAll(), 5000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Hour Logger</h1>\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <Home\n                pages={this.state.pages}\n                setState={this.setState}\n                getAll={this.getAll}\n              />\n            }\n          />\n          <Route\n            path=\"/dayview/:date\"\n            element={<DayView state={this.state} setState={this.setState} />}\n          />\n        </Routes>\n      </div>\n    );\n  }\n}\n\n/*\n\npost and put flag\npost\n   when opening create dayview page\n\nput\n    opening directly to dayiew/someDate\n    when clicking on link to\n*/\n","/home/daniel/Documents/hourLogger/my-app/src/DayView.tsx",["27","28","29","30","31","32","33","34","35","36","37"],[],"import { log } from \"node:console\";\nimport * as React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { isPropertyAccessChain } from \"typescript\";\nimport \"./App.css\";\nimport type { state } from \"./App\";\nimport { setEnvironmentData } from \"node:worker_threads\";\n\ntype row = {\n  id: number;\n  hrs: number;\n  activity: string;\n};\nlet PageID = 0;\nexport type pageData = { goals: string; table: row[]; date: string };\nexport let DayView = (props: { state: state; setState: any }) => {\n  let newPage = false;\n  console.log(document.baseURI);\n  let params = useParams();\n  if (params.date && params.date != \"new\") {\n    console.log(\"saw date param:\");\n    console.log(params.date);\n    let str = params.date;\n    props.state.pages.forEach((value, i) => {\n      if (value.date == str) {\n        PageID = i;\n      }\n    });\n  }\n  if (params.date == \"new\") {\n    console.log(\"DayView: newPage\");\n    props.state.pages = [\n      { table: [], goals: \"\", date: new Date().toDateString() },\n    ];\n    newPage = true;\n  }\n  let sendData = () => {\n    if (props.state.pages[PageID]) {\n      // add error handlingprops.pages[PageID].table[1].activity\n      console.log(\"interval send: \" + props.state.pages[PageID].date);\n      let table = props.state.pages[PageID].table;\n      let JSONStr = JSON.stringify(props.state.pages[PageID]);\n      let request = new XMLHttpRequest();\n      request.open(newPage ? \"post\" : \"put\", \"/update/\");\n      request.setRequestHeader(\"Content-Type\", \"application/json\");\n      request.addEventListener(\"load\", (event) => {\n        console.log(\"XHR Status code: \", request.status);\n        if (request.status === 409) {\n          alert(\"The page you are trying to create already exists\");\n        }\n      });\n      console.log(\"SENDDATA:\");\n      console.log(newPage ? \"post\" : \"put\");\n      console.log(JSONStr);\n      request.send(JSONStr);\n    }\n  };\n\n  // React.useEffect(() => {\n  //   let i = setInterval(() => sendData(), 5000);\n  //   console.log(\"Dayview mounted\")\n  //   return () => {\n  //     clearInterval(i);\n  //     console.log(\"Dayview unmounted\")\n  //   };\n  // }, []);\n\n  console.log(\"Rendering DayView with: \");\n  console.log(props.state.pages);\n\n  let main = props.state.pages ? (\n    <main>\n      <h2>{props.state.pages[PageID].date}</h2>\n      <ActivitiesTable\n        pages={props.state.pages}\n        setState={props.setState}\n        sendData={sendData}\n      />\n      <Form\n        formID=\"Goals\"\n        value={props.state.pages[PageID].goals}\n        setState={props.setState}\n      />\n    </main>\n  ) : (\n    <main>Loading...</main>\n  );\n  return (\n    <>\n      {main}\n      <nav>\n        <Link to=\"/\">Home</Link>\n      </nav>\n    </>\n  );\n};\n\nlet count: number = 0;\nfunction ActivitiesTable(props: {\n  pages: [pageData];\n  setState: any;\n  sendData: any;\n}) {\n  let [tableEntry, setTableRow] = React.useState({\n    hrs: NaN,\n    activity: \"enter activitiy\",\n  });\n  function counter(): number {\n    count++;\n    return count;\n  }\n\n  let tablecounterlock: boolean = false;\n\n  //lock locks table counter\n  function lock() {\n    tablecounterlock = true;\n  }\n\n  //unlock unlocks table counter\n  function unlock() {\n    tablecounterlock = false;\n  }\n  //locked tell you if table counter is locked\n  // @returns boolean\n  function locked(): boolean {\n    return tablecounterlock;\n  }\n\n  function sumHrs(): number {\n    let count = 0;\n    for (let i = 0; i < props.pages[PageID].table.length; i++) {\n      let row = props.pages[PageID].table[i].hrs;\n      if (row) {\n        console.log(row);\n        count += row;\n      }\n    }\n    return count;\n  }\n  //deleterow deletes row from activity\n  function deleteRow(id: number) {\n    console.log(\"delete row:\" + \"Id: \" + id.toString());\n    let tempA = props.pages[PageID].table;\n    for (let i = 0; i < tempA.length; i++) {\n      if (tempA[i].id === id) {\n        console.log(i);\n        tempA.splice(i, 1);\n        let pages = props.pages;\n        pages[PageID].table = tempA;\n        props.setState({ pages });\n      }\n    }\n    console.log(\"DeleteRow:\");\n    console.log(props.pages[PageID].table);\n    props.sendData();\n  }\n  //handleChangeActivity updates state of activity on change\n  function handleChangeActivity(event: any) {\n    setTableRow({\n      activity: event.target.value,\n      hrs: tableEntry.hrs,\n    });\n\n    // console.log(props.value[tempPageID].activity);\n  }\n\n  //handleChangeHrs updates state of hrs on change\n  function handleChangeHrs(event: any) {\n    setTableRow({\n      activity: tableEntry.activity,\n      hrs: parseFloat(event.target.value),\n    });\n\n    // console.log(props.pages[PageID].hrs);\n  }\n\n  //handleSubmit adds row entry to activity table\n  function handleSubmit(event: any) {\n    event.preventDefault();\n    // console.log(props.pages[PageID].activity + \"counter:\" + counter());\n    if (!locked()) {\n      lock();\n      let tempTable = props.pages[PageID].table;\n      console.log(\"adding row: \" + tableEntry.hrs);\n      tempTable.push({\n        id: counter(),\n        hrs: tableEntry.hrs,\n        activity: tableEntry.activity,\n      });\n\n      let tempPages: [pageData] = props.pages;\n      tempPages[PageID].table = tempTable;\n      props.setState(tempPages);\n      setTableRow({\n        hrs: NaN,\n        activity: \"enter activitiy\",\n      });\n      console.log(\"adding row: \" + props.pages[PageID].table[0].hrs);\n      props.sendData();\n      unlock();\n    } else {\n      alert(\"could not add activity row\");\n    }\n    let nextField = document.getElementById(\"hours\");\n    if (nextField) {\n      nextField.focus();\n    }\n\n    props.setState((value: state) => {\n      // console.log(\"after Adding row:\");\n      // console.log(value.pages[PageID].table);\n      return value;\n    });\n  }\n\n  function hrsOnEnter(event: any) {\n    if (event.keyCode == 13) {\n      event.preventDefault();\n      let nextField = document.getElementById(\"activity\");\n      if (nextField) {\n        nextField.focus();\n      }\n    }\n  }\n\n  //renderTable returns a react node with table rows corresponding to the activitytable array elements.\n  function renderTable() {\n    return props.pages[PageID].table.map((item) => {\n      if (props.pages[PageID].table != []) {\n        return (\n          <tr id={item.id.toString()}>\n            <td>{item.hrs}</td>\n            <td>{item.activity}</td>\n            <td>\n              <button\n                type=\"button\"\n                onClick={() => deleteRow(item.id)}\n              >\n                X\n              </button>\n            </td>\n          </tr>\n        );\n      }\n    });\n  }\n  // console.log(\n  //   \"ActivityTable rendering\" + props.pages[PageID].table[0].activity\n  // );\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <table className=\"activitiesTable\">\n          <thead>\n            <td>Hours</td>\n            <td>description</td>\n          </thead>\n          <tbody>\n            {renderTable()}\n            <tr>\n              <td>\n                <input\n                  id=\"hours\"\n                  type=\"number\"\n                  value={tableEntry.hrs}\n                  onChange={handleChangeHrs}\n                  onKeyDown={hrsOnEnter}\n                ></input>\n              </td>\n              <td>\n                <input\n                  id=\"activity\"\n                  type=\"text\"\n                  value={tableEntry.activity}\n                  onChange={handleChangeActivity}\n                ></input>\n              </td>\n              <td>\n                <input type=\"submit\" value=\"+\" />\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <td>Total: {sumHrs()}</td>\n          </tfoot>\n        </table>\n      </form>\n    </div>\n  );\n}\n\nlet Form = (props: { formID: string; value: string; setState: any }) => {\n  function handleSubmit(event: any) {\n    console.log(props.formID + \" \" + props.value);\n    event.preventDefault();\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>{props.formID}</label>\n        <br />\n        <textarea\n          value={props.value}\n          onChange={(event) => props.setState(event.target.value)}\n        />\n        <br />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </div>\n  );\n};\n","/home/daniel/Documents/hourLogger/my-app/src/Home.tsx",["38","39","40","41","42","43"],[],"import React from \"react\";\nimport {pageData} from \"./DayView\";\nimport { Link } from \"react-router-dom\";\nimport { setConstantValue } from \"typescript\";\n\nexport default function Home(props: {pages: [pageData], setState: any, getAll: VoidFunction}) {\n  const [count, setCount] = React.useState(\"test\");\n  let increment = () => {\n    setCount(count + 1);\n  };\n  let decrement = () => {\n    setCount(count + 1);\n  };\n  React.useEffect(() => props.getAll(), [])\n  return (\n    <div>\n      <main>\n        <Table pages={props.pages} />\n        <Link to=\"/dayview/new\">New Page</Link>\n\n      </main>\n    </div>\n  );\n}\n\nfunction Table(props:{pages: [pageData]}) {\n  if (props.pages == null) return <div id=\"noData\">no data</div>\n    return (\n      <table>\n        <thead>\n          <td>Summary</td>\n          <td>Total HRS</td>\n          <td>row ID</td>\n        </thead>\n        <tbody>\n          {props.pages.map((page, ID, a) => {\n            let tally = 0;\n            if (page.table != undefined) {\n              for (let row of page.table) {\n                tally += row.hrs + 0;\n              }\n            }\n            if (page.table.length !== 0){\n            return (\n              <tr id={page.date}>\n                <td> <Link to={\"/dayview/\"+ page.date}>{page.date}</Link></td>\n                <td>{tally}</td>\n                <td>{page.date}</td>\n              </tr>\n            );\n            }\n          })}\n        </tbody>\n      </table>\n    );\n}\n",{"ruleId":"44","severity":1,"message":"45","line":2,"column":25,"nodeType":"46","messageId":"47","endLine":2,"endColumn":29},{"ruleId":"44","severity":1,"message":"48","line":3,"column":10,"nodeType":"46","messageId":"47","endLine":3,"endColumn":29},{"ruleId":"44","severity":1,"message":"49","line":1,"column":10,"nodeType":"46","messageId":"47","endLine":1,"endColumn":13},{"ruleId":"44","severity":1,"message":"50","line":4,"column":10,"nodeType":"46","messageId":"47","endLine":4,"endColumn":31},{"ruleId":"44","severity":1,"message":"51","line":7,"column":10,"nodeType":"46","messageId":"47","endLine":7,"endColumn":28},{"ruleId":"52","severity":1,"message":"53","line":20,"column":34,"nodeType":"54","messageId":"55","endLine":20,"endColumn":36},{"ruleId":"52","severity":1,"message":"56","line":25,"column":22,"nodeType":"54","messageId":"55","endLine":25,"endColumn":24},{"ruleId":"52","severity":1,"message":"56","line":30,"column":19,"nodeType":"54","messageId":"55","endLine":30,"endColumn":21},{"ruleId":"44","severity":1,"message":"57","line":41,"column":11,"nodeType":"46","messageId":"47","endLine":41,"endColumn":16},{"ruleId":"58","severity":1,"message":"59","line":143,"column":31,"nodeType":"54","messageId":"60","endLine":143,"endColumn":32},{"ruleId":"52","severity":1,"message":"56","line":218,"column":23,"nodeType":"54","messageId":"55","endLine":218,"endColumn":25},{"ruleId":"61","severity":1,"message":"62","line":229,"column":49,"nodeType":"63","messageId":"64","endLine":229,"endColumn":51},{"ruleId":"52","severity":1,"message":"53","line":230,"column":37,"nodeType":"54","messageId":"55","endLine":230,"endColumn":39},{"ruleId":"44","severity":1,"message":"65","line":4,"column":10,"nodeType":"46","messageId":"47","endLine":4,"endColumn":26},{"ruleId":"44","severity":1,"message":"66","line":8,"column":7,"nodeType":"46","messageId":"47","endLine":8,"endColumn":16},{"ruleId":"44","severity":1,"message":"67","line":11,"column":7,"nodeType":"46","messageId":"47","endLine":11,"endColumn":16},{"ruleId":"68","severity":1,"message":"69","line":14,"column":41,"nodeType":"70","endLine":14,"endColumn":43,"suggestions":"71"},{"ruleId":"61","severity":1,"message":"62","line":36,"column":42,"nodeType":"63","messageId":"64","endLine":36,"endColumn":44},{"ruleId":"52","severity":1,"message":"53","line":38,"column":28,"nodeType":"54","messageId":"55","endLine":38,"endColumn":30},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'isPropertySignature' is defined but never used.","'log' is defined but never used.","'isPropertyAccessChain' is defined but never used.","'setEnvironmentData' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'table' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'setConstantValue' is defined but never used.","'increment' is assigned a value but never used.","'decrement' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.","ArrayExpression",["72"],{"desc":"73","fix":"74"},"Update the dependencies array to be: [props]",{"range":"75","text":"76"},[452,454],"[props]"]